First install the boot package. Run the below code in your console.
```{r}
install.packages('boot')
```

```{r}
library('boot')
library('dplyr')
```


Let us take a look at the most basic use of bootstrapping. As it is a resampling method, bootstrapping allows us to create confidence intervals of summary statistics. Let us take a look at this in the context of declared weights in our data. 

First we must create a function, this will tell the bootstrapping method what statistic we are interested in. For our demonstration purposes, we will keep it simple and choose mean as our statistic of interest. Feel free to change the statistics however, with cor(),sd() or any other statistic. You can also change, the variable that is being examined between, horse_age,declared_weight,actual_weight,finish_time and horse_id. (If you choose horse_id you will probably see the greatest range in the confidence interval)

```{r}
functionmean <- function(data,i){
  dataframe1<-data[i,] #this step is used for indexing row
  return(mean(dataframe1$declared_weight))
}
```
Now let us apply the boot function.

```{r}
set.seed(1)
declared_weight_bootstrapmean<-boot(weightestimate,functionmean,R=1000)
```
The basic boot function takes 3 arguments. The first is the data, then the function of the statistic, and R is the number of resample or repetitions (generally 1000 resamples is a good number). For further documentation, go to https://www.rdocumentation.org/packages/boot/versions/1.3-28/topics/boot .

Let us explore the object which is created with the boot function.

```{r}
declared_weight_bootstrapmean
```
You will find that t is a list of the sample statistics generated by resampling. You will also find that there are other parameters that the boot function can take, such as strata, stype, sim, and weights. We will focus on sim, specifically the 'parametric' value. The default of the boot function is to run a nonparametric bootstrap. Let us try different values for sim. (Note: Do not run a parametric bootstrap, it requires a distribution function not covered in this vignette.)


```{r}
declared_weight_balbootstrapmean<-boot(weightestimate,functionmean,R=1000,sim='balanced')
```
The balanced boostrap ensures that each observation occurs exactly R times across the union set of all resamples which means that each observation will affect the statistic exactly the same.



```{r}
declared_weight_bootstrapmean
declared_weight_balbootstrapmean
```





